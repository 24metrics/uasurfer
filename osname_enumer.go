// Code generated by "enumer -type=OSName -json -bson"; DO NOT EDIT.

package uasurfer

import (
	"encoding/json"
	"fmt"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	"go.mongodb.org/mongo-driver/x/bsonx/bsoncore"
	"strings"
)

const _OSNameName = "OSUnknownOSWindowsPhoneOSWindowsOSMacOSXOSiOSOSAndroidOSBlackberryOSChromeOSOSKindleOSWebOSOSLinuxOSPlaystationOSXboxOSNintendoOSBot"

var _OSNameIndex = [...]uint8{0, 9, 23, 32, 40, 45, 54, 66, 76, 84, 91, 98, 111, 117, 127, 132}

const _OSNameLowerName = "osunknownoswindowsphoneoswindowsosmacosxosiososandroidosblackberryoschromeososkindleoswebososlinuxosplaystationosxboxosnintendoosbot"

func (i OSName) String() string {
	if i < 0 || i >= OSName(len(_OSNameIndex)-1) {
		return fmt.Sprintf("OSName(%d)", i)
	}
	return _OSNameName[_OSNameIndex[i]:_OSNameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OSNameNoOp() {
	var x [1]struct{}
	_ = x[OSUnknown-(0)]
	_ = x[OSWindowsPhone-(1)]
	_ = x[OSWindows-(2)]
	_ = x[OSMacOSX-(3)]
	_ = x[OSiOS-(4)]
	_ = x[OSAndroid-(5)]
	_ = x[OSBlackberry-(6)]
	_ = x[OSChromeOS-(7)]
	_ = x[OSKindle-(8)]
	_ = x[OSWebOS-(9)]
	_ = x[OSLinux-(10)]
	_ = x[OSPlaystation-(11)]
	_ = x[OSXbox-(12)]
	_ = x[OSNintendo-(13)]
	_ = x[OSBot-(14)]
}

var _OSNameValues = []OSName{OSUnknown, OSWindowsPhone, OSWindows, OSMacOSX, OSiOS, OSAndroid, OSBlackberry, OSChromeOS, OSKindle, OSWebOS, OSLinux, OSPlaystation, OSXbox, OSNintendo, OSBot}

var _OSNameNameToValueMap = map[string]OSName{
	_OSNameName[0:9]:          OSUnknown,
	_OSNameLowerName[0:9]:     OSUnknown,
	_OSNameName[9:23]:         OSWindowsPhone,
	_OSNameLowerName[9:23]:    OSWindowsPhone,
	_OSNameName[23:32]:        OSWindows,
	_OSNameLowerName[23:32]:   OSWindows,
	_OSNameName[32:40]:        OSMacOSX,
	_OSNameLowerName[32:40]:   OSMacOSX,
	_OSNameName[40:45]:        OSiOS,
	_OSNameLowerName[40:45]:   OSiOS,
	_OSNameName[45:54]:        OSAndroid,
	_OSNameLowerName[45:54]:   OSAndroid,
	_OSNameName[54:66]:        OSBlackberry,
	_OSNameLowerName[54:66]:   OSBlackberry,
	_OSNameName[66:76]:        OSChromeOS,
	_OSNameLowerName[66:76]:   OSChromeOS,
	_OSNameName[76:84]:        OSKindle,
	_OSNameLowerName[76:84]:   OSKindle,
	_OSNameName[84:91]:        OSWebOS,
	_OSNameLowerName[84:91]:   OSWebOS,
	_OSNameName[91:98]:        OSLinux,
	_OSNameLowerName[91:98]:   OSLinux,
	_OSNameName[98:111]:       OSPlaystation,
	_OSNameLowerName[98:111]:  OSPlaystation,
	_OSNameName[111:117]:      OSXbox,
	_OSNameLowerName[111:117]: OSXbox,
	_OSNameName[117:127]:      OSNintendo,
	_OSNameLowerName[117:127]: OSNintendo,
	_OSNameName[127:132]:      OSBot,
	_OSNameLowerName[127:132]: OSBot,
}

var _OSNameNames = []string{
	_OSNameName[0:9],
	_OSNameName[9:23],
	_OSNameName[23:32],
	_OSNameName[32:40],
	_OSNameName[40:45],
	_OSNameName[45:54],
	_OSNameName[54:66],
	_OSNameName[66:76],
	_OSNameName[76:84],
	_OSNameName[84:91],
	_OSNameName[91:98],
	_OSNameName[98:111],
	_OSNameName[111:117],
	_OSNameName[117:127],
	_OSNameName[127:132],
}

// OSNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OSNameString(s string) (OSName, error) {
	if val, ok := _OSNameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OSNameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OSName values", s)
}

// OSNameValues returns all values of the enum
func OSNameValues() []OSName {
	return _OSNameValues
}

// OSNameStrings returns a slice of all String values of the enum
func OSNameStrings() []string {
	strs := make([]string, len(_OSNameNames))
	copy(strs, _OSNameNames)
	return strs
}

// IsAOSName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OSName) IsAOSName() bool {
	for _, v := range _OSNameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OSName
func (i OSName) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OSName
func (i *OSName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OSName should be a string, got %s", data)
	}

	var err error
	*i, err = OSNameString(s)
	return err
}

// MarshalBSONValue implements the bson.ValueMarshaler interface for OSName
func (i OSName) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bsontype.String, bsoncore.AppendString(nil, i.String()), nil
}

// UnmarshalBSONValue implements the bson.ValueUnmarshaler interface for OSName
func (i *OSName) UnmarshalBSONValue(t bsontype.Type, src []byte) error {
	str, _, _ := bsoncore.ReadString(src)
	var err error
	*i, err = OSNameString(str)
	return err
}
