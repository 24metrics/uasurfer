// Code generated by "enumer -type=DeviceType -json -bson"; DO NOT EDIT.

package uasurfer

import (
	"encoding/json"
	"fmt"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	"go.mongodb.org/mongo-driver/x/bsonx/bsoncore"
	"strings"
)

const _DeviceTypeName = "DeviceUnknownDeviceComputerDeviceTabletDevicePhoneDeviceConsoleDeviceWearableDeviceTV"

var _DeviceTypeIndex = [...]uint8{0, 13, 27, 39, 50, 63, 77, 85}

const _DeviceTypeLowerName = "deviceunknowndevicecomputerdevicetabletdevicephonedeviceconsoledevicewearabledevicetv"

func (i DeviceType) String() string {
	if i < 0 || i >= DeviceType(len(_DeviceTypeIndex)-1) {
		return fmt.Sprintf("DeviceType(%d)", i)
	}
	return _DeviceTypeName[_DeviceTypeIndex[i]:_DeviceTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DeviceTypeNoOp() {
	var x [1]struct{}
	_ = x[DeviceUnknown-(0)]
	_ = x[DeviceComputer-(1)]
	_ = x[DeviceTablet-(2)]
	_ = x[DevicePhone-(3)]
	_ = x[DeviceConsole-(4)]
	_ = x[DeviceWearable-(5)]
	_ = x[DeviceTV-(6)]
}

var _DeviceTypeValues = []DeviceType{DeviceUnknown, DeviceComputer, DeviceTablet, DevicePhone, DeviceConsole, DeviceWearable, DeviceTV}

var _DeviceTypeNameToValueMap = map[string]DeviceType{
	_DeviceTypeName[0:13]:       DeviceUnknown,
	_DeviceTypeLowerName[0:13]:  DeviceUnknown,
	_DeviceTypeName[13:27]:      DeviceComputer,
	_DeviceTypeLowerName[13:27]: DeviceComputer,
	_DeviceTypeName[27:39]:      DeviceTablet,
	_DeviceTypeLowerName[27:39]: DeviceTablet,
	_DeviceTypeName[39:50]:      DevicePhone,
	_DeviceTypeLowerName[39:50]: DevicePhone,
	_DeviceTypeName[50:63]:      DeviceConsole,
	_DeviceTypeLowerName[50:63]: DeviceConsole,
	_DeviceTypeName[63:77]:      DeviceWearable,
	_DeviceTypeLowerName[63:77]: DeviceWearable,
	_DeviceTypeName[77:85]:      DeviceTV,
	_DeviceTypeLowerName[77:85]: DeviceTV,
}

var _DeviceTypeNames = []string{
	_DeviceTypeName[0:13],
	_DeviceTypeName[13:27],
	_DeviceTypeName[27:39],
	_DeviceTypeName[39:50],
	_DeviceTypeName[50:63],
	_DeviceTypeName[63:77],
	_DeviceTypeName[77:85],
}

// DeviceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceTypeString(s string) (DeviceType, error) {
	if val, ok := _DeviceTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DeviceTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceType values", s)
}

// DeviceTypeValues returns all values of the enum
func DeviceTypeValues() []DeviceType {
	return _DeviceTypeValues
}

// DeviceTypeStrings returns a slice of all String values of the enum
func DeviceTypeStrings() []string {
	strs := make([]string, len(_DeviceTypeNames))
	copy(strs, _DeviceTypeNames)
	return strs
}

// IsADeviceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeviceType) IsADeviceType() bool {
	for _, v := range _DeviceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DeviceType
func (i DeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceType
func (i *DeviceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DeviceType should be a string, got %s", data)
	}

	var err error
	*i, err = DeviceTypeString(s)
	return err
}

// MarshalBSONValue implements the bson.ValueMarshaler interface for DeviceType
func (i DeviceType) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bsontype.String, bsoncore.AppendString(nil, i.String()), nil
}

// UnmarshalBSONValue implements the bson.ValueUnmarshaler interface for DeviceType
func (i *DeviceType) UnmarshalBSONValue(t bsontype.Type, src []byte) error {
	str, _, _ := bsoncore.ReadString(src)
	var err error
	*i, err = DeviceTypeString(str)
	return err
}
